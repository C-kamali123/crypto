#include <stdio.h>
#include <string.h>

// Function to encrypt using Rail Fence Cipher
void encryptRailFence(char *text, int key, char *result) {
    int len = strlen(text);
    char rail[key][len];

    // Initialize the rail matrix to '\0'
    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            rail[i][j] = '\0';

    // Fill the rail matrix with characters from the input text
    int row = 0, dir_down = 1;
    for (int i = 0; i < len; i++) {
        rail[row][i] = text[i];
        if (row == 0) {
            dir_down = 1;
        } else if (row == key - 1) {
            dir_down = 0;
        }
        row = dir_down ? row + 1 : row - 1;
    }

    // Read the matrix in a row-wise manner to generate the cipher text
    int k = 0;
    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            if (rail[i][j] != '\0')
                result[k++] = rail[i][j];
    result[k] = '\0';
}

// Function to decrypt using Rail Fence Cipher
void decryptRailFence(char *cipher, int key, char *result) {
    int len = strlen(cipher);
    char rail[key][len];

    // Initialize the rail matrix to '\0'
    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            rail[i][j] = '\0';

    // Mark the positions in the matrix where characters will be placed
    int row = 0, dir_down = 1;
    for (int i = 0; i < len; i++) {
        rail[row][i] = '*';
        if (row == 0) {
            dir_down = 1;
        } else if (row == key - 1) {
            dir_down = 0;
        }
        row = dir_down ? row + 1 : row - 1;
    }

    // Place the cipher characters in the marked positions
    int k = 0;
    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            if (rail[i][j] == '*')
                rail[i][j] = cipher[k++];

    // Read the matrix in a zigzag manner to get the original text
    row = 0, dir_down = 1;
    for (int i = 0; i < len; i++) {
        result[i] = rail[row][i];
        if (row == 0) {
            dir_down = 1;
        } else if (row == key - 1) {
            dir_down = 0;
        }
        row = dir_down ? row + 1 : row - 1;
    }
    result[len] = '\0';
}

int main() {
    char text[] = "HELLOWORLD";
    int key = 3;
    char encrypted[100];
    char decrypted[100];

    encryptRailFence(text, key, encrypted);
    printf("Encrypted: %s\n", encrypted);

    decryptRailFence(encrypted, key, decrypted);
    printf("Decrypted: %s\n", decrypted);

    return 0;
}
