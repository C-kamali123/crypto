#include <stdio.h>
#include <stdlib.h>
#include <math.h>
// Function to calculate gcd
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
// Function to calculate the modular inverse
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;
}
// Function to perform modular exponentiation
int modPow(int base, int exp, int mod) {
    int result = 1;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}
int main() {
    // Step 1: Choose two distinct prime numbers p and q
    int p = 3;
    int q = 11;
    int n = p * q;
    int phi = (p - 1) * (q - 1);
    // Step 2: Choose an integer e such that 1 < e < phi and gcd(e, phi) = 1
    int e = 3;
    while (gcd(e, phi) != 1) {
        e++;
    }
    // Step 3: Compute d, the modular multiplicative inverse of e mod phi
    int d = modInverse(e, phi);
    // Display the public and private keys
    printf("Public Key: %d\n", e);
    printf("Private Key: %d\n", d);
    printf("n:%d\n",n);
    // Message to be encrypted
    int message = 3;
    printf("Original Message: %d\n", message);
    // Step 4: Encrypt the message
    int encrypted = modPow(message, e, n);
    printf("Encrypted Message: %d\n", encrypted);
    // Step 5: Decrypt the message
    int decrypted = modPow(encrypted, d, n);
    printf("Decrypted Message: %d\n", decrypted);
    return 0;
}
