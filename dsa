#include <stdio.h>
#include <math.h>

// Extended Euclidean Algorithm to find modular inverse
long int ext_euclidean(long int m, long int b) {
    int a1 = 1, a2 = 0, a3 = m, b1 = 0, b2 = 1, b3 = b, q, t1, t2, t3;
    while (1) {
        if (b3 == 0) {
            return 0;
        }
        if (b3 == 1) {
            if (b2 < 0)
                b2 += m;
            return b2;
        }
        q = a3 / b3;
        t1 = a1 - (q * b1);
        t2 = a2 - (q * b2);
        t3 = a3 - (q * b3);
        a1 = b1;
        a2 = b2;
        a3 = b3;
        b1 = t1;
        b2 = t2;
        b3 = t3;
    }
}

// Modular exponentiation
long int power(long int a, long int j, long int c) {
    long int f = 1;
    for (long int i = 1; i <= j; i++) {
        f = (f * a) % c;
    }
    return f % c;
}

int main() {
    long int p, q, g, x, hm, k, y, r, s, s1, w, u1, u2, v, v1, v2, v3;

    // Input values
    printf("Enter the value of p: ");
    scanf("%ld", &p);

    printf("Enter the value of q: ");
    scanf("%ld", &q);

    printf("Enter the value of g: ");
    scanf("%ld", &g);

    printf("Enter the value of x: ");
    scanf("%ld", &x);

    printf("Enter the value of hm: ");
    scanf("%ld", &hm);

    printf("Enter the value of k: ");
    scanf("%ld", &k);

    // Calculate y
    y = power(g, x, p);
    printf("\nValue of y: %ld", y);

    // Calculate r
    r = power(g, k, p) % q;
    printf("\nValue of r: %ld", r);

    // Calculate s
    s = ext_euclidean(q, k);
    s1 = (hm + (x * r));
    s = (s * s1) % q;
    printf("\nValue of s: %ld", s);

    // Signature (r, s)
    printf("\nSignature (r, s): %ld %ld", r, s);

    // Calculate w
    w = ext_euclidean(q, s);
    printf("\nValue of w: %ld", w);

    // Calculate u1 and u2
    u1 = (hm * w) % q;
    printf("\nValue of u1: %ld", u1);

    u2 = (r * w) % q;
    printf("\nValue of u2: %ld", u2);

    // Calculate v
    v = power(g, u1, p);
    v1 = power(y, u2, p);
    v2 = (v * v1) % p;
    v3 = v2 % q;
    printf("\nValue of v: %ld", v3);

    return 0;
}
